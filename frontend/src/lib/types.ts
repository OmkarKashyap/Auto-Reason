// src/lib/types.ts

// Data structure from your backend/Neo4j
export interface GraphNode {
    id: string; // Unique identifier for the node (e.g., entity name or UUID)
    label: string; // Display text for the node
    // Include other properties stored in Neo4j if needed for display/interaction
    // e.g., type?: string; properties?: Record<string, any>;
  }
  
  export interface GraphEdge {
    id?: string; // Optional edge ID if needed
    source: string; // ID of the source node
    target: string; // ID of the target node
    label?: string; // Display text for the relationship (e.g., 'explains', 'related to')
    // Include other properties stored in Neo4j if needed
    // e.g., properties?: Record<string, any>;
  }
  
  export interface GraphData {
    nodes: GraphNode[];
    edges: GraphEdge[];
  }
  
  // Represents an item in the sidebar list
  export interface Thread {
    id: string; // Unique ID for the graph/conversation (e.g., generated by backend)
    name?: string; // Optional display name (e.g., summary, first few words, user-defined)
    lastUpdated?: string | number | Date; // For sorting or display
  }
  
  // For API communication with your FastAPI backend
  export interface ProcessTextRequest {
    text: string;
    action: 'new' | 'add';
    graphId?: string | null; // Only for 'add' action
  }
  
  export interface ProcessTextResponse {
    success: boolean;
    graphId: string; // The ID of the created or updated graph
    message?: string;
    // Include any other relevant data from backend, e.g., summary
  }
  
  export interface ApiErrorResponse {
      error: string;
      details?: string;
  }
  
  // --- Cytoscape Specific Types (can also be inline) ---
  export interface CyNodeData {
      id: string;
      label: string;
      // mirror other GraphNode properties if needed by style or events
  }
  
  export interface CyEdgeData {
      source: string;
      target: string;
      label?: string;
       // mirror other GraphEdge properties if needed
  }
  
  // Use cytoscape's built-in ElementDefinition for flexibility
  // Or define a stricter type if preferred:
  // export type CyElement =
  // | { data: CyNodeData; group: 'nodes' }
  // | { data: CyEdgeData; group: 'edges' };